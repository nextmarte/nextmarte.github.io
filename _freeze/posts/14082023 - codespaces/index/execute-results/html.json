{
  "hash": "d29f376c7f5f5f437d12dfcee6174fe7",
  "result": {
    "markdown": "---\ntitle: \"Como instalar e rodar um projeto QUARTO com R no GitHub Codespaces de graça\"\nauthor: \"Marcus\"\ndate: \"2023-08-14\"\ncategories: [git, github, infra, linux]\nimage: \"CodeSpaces.png\"\neditor: visual\n---\n\n\n![](CodeSpaces.png)\n\n::: justify\n\n## Lidando com a falta de recursos computacionais em sala de aula\n\nNo último semestre eu fui estagiário em uma disciplina que tinha por objetivo ensinar fundamentos de ciência de dados com R aplicado em finanças para alunos de administração e engenharia. As aulas foram ministradas em um laboratório da minha faculdade que contava com computadores relativamente antigos (tecnologias anteriores a 2015) usando em sua maioria o windows 8. A IDE de escolha foi o RStudio, algo que aliado a baixa capacidade de processamento dos computadores, tornava a experiência de aprendizado muito ruim, pois várias vezes as aulas eram atrasadas ou retardadas devido ao mau funcionamento dos computadores que demoravam para realizar tarefas simples como o download de um pacote ou a renderização de um documento markdown. Como paliativo, sugeri a vários alunos o uso da mesma IDE na nuvem.\n\nPensando nesse problema acabei encontrado o codespaces do GitHub como possível solução, nele o professor pode criar e preparar um ambiente com todos os recursos necessários para viabilizar o ensino da disciplina usando o GitHub Classroom ou o Google Classroom. Os alunos contam com mais de 180 h/core por mês para realizar as tarefas, além disso tem acesso a todas as vantagens do programa GitHub Student Developer Pack. O melhor de tudo é que o professor não precisa pagar nada por isso, pois o GitHub disponibiliza o serviço de forma gratuita para professores e alunos de instituições de ensino parceiras. Neste post eu vou ensinar a como preparar o ambiente de desenvolvimento com Quarto e R, além de como rodar um projeto Quarto usando o Codespaces.\n\nO que você precisa para seguir este tutorial? Uma conta no github. É simples assim, a única parte que tive alguma dificuldade foi na instalação do QUARTO no ambiente linux, mas superei rapidamente usando uma alternativa ao método de instalação sugerido na documentação oficial.\n\n## Passo 1 - acessar o codespaces e criar um ambiente em branco\n\nAcesse o [Codespaces](https://github.com/features/codespaces) e clique em  [Get started for free](https://github.com/codespaces). Serão exibidas diversas opções de template, esses templates já vem com o ambiente de desenvolvimento pré-configurado para outras linguagens e frameworks, mas como vamos instalar o Quarto e o R, escolha a opção **Blank**.\n![](templates.png)\n\nVocê verá a interface do VScode e em alguns segundos o ambiente estará pronto para uso. Você pode acessar o terminal clicando em **Terminal** é através dele que vamos instalar o Quarto e o R.\n\n## Passo 2 - Instalar o Quarto\n\nVocês não precisa saber `bash` para realizar a instalação, basta copiar e colar ou digitar os comandos abaixo no terminal.\n\n```bash\n# baixa o pacote usando privilégios de administrador \nsudo curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb\n\n```\n![](instalation.png)\n\nO arquivo será baixado na pasta codespaces-blank, para conferir digite `ls -l` no terminal e pressione enter. Agora vamos instalar o pacote usando o comando `dpkg`:\n\n```bash\n# instala o cli do QUARTO usando privilégios de administrador \n#e verifica a instalação\nsudo dpkg -i quarto-linux-amd64.deb\n/usr/local/bin/quarto check\n\n```\nobs.: a documentação oficial sugere o uso do comando `gdebi` porém ele não está disponível por padrão na distribuição linux do codespaces, por isso usei o `dpkg`. \n\n```bash \n\n#output\n@user ➜ /workspaces/codespaces-blank $ /usr/local/bin/quarto check\n\n[✓] Checking versions of quarto binary dependencies...\n\n      Pandoc version 3.1.1: OK\n      Dart Sass version 1.55.0: OK\n[✓] Checking versions of quarto dependencies......OK\n[✓] Checking Quarto installation......OK\n      Version: 1.3.450\n      Path: /opt/quarto/bin\n\n[✓] Checking basic markdown render....OK\n\n[✓] Checking Python 3 installation....OK\n      Version: 3.10.8\n      Path: /home/codespace/.python/current/bin/python3\n      Jupyter: 5.3.1\n      Kernels: python3\n\n[✓] Checking Jupyter engine render....OK\n\n[✓] Checking R installation...........(None)\n\n      Unable to locate an installed version of R.\n      Install R from https://cloud.r-project.org/\n```\n\n## Passo 3 - Instalar o R\n\nVerifique que o nosso check não encontrou o R instalado, vamos resolver isso agora. Vamos acessar o [https://cloud.r-project.org/](CRAN) e descobrir como instalar o R. Para isso precisamos descobir qual é a distribuição linux que estamos usando, para isso digite `cat /etc/os-release` no terminal e pressione enter.\n\n```bash\n#output\n/workspaces/codespaces-blank $ cat /etc/os-release\nNAME=\"Ubuntu\"\nVERSION=\"20.04.6 LTS (Focal Fossa)\"\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME=\"Ubuntu 20.04.6 LTS\"\nVERSION_ID=\"20.04\"\nHOME_URL=\"https://www.ubuntu.com/\"\nSUPPORT_URL=\"https://help.ubuntu.com/\"\nBUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"\nPRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"\nVERSION_CODENAME=focal\nUBUNTU_CODENAME=focal\n```\nComo estou usando o Ubuntu 20.04.6 LTS (Focal Fossa), vou seguir as instruções para instalação do R no Ubuntu. Vamos adicionar o repositório do CRAN ao nosso sistema, para isso digite os comandos abaixo no terminal:\n\n```bash\n# atualiza os índices\nsudo apt update -qq\n# instala dois pacotes auxiliares que precisamos\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# adiciona a chave de assinatura (por Michael Rutter) para esses repositórios\n# Para verificar a chave, execute gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Impressão digital: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# adiciona o repositório R 4.0 do CRAN - ajuste 'focal' para 'groovy' ou 'bionic', se necessário\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n\n# instala o R\nsudo apt install --no-install-recommends r-base\n\n# Instala alguns pacotes recomendados\nsudo add-apt-repository ppa:c2d4u.team/c2d4u4.0+\n```\n\nPasso 4 - instalar as extensões do VScode\n\nPara usar o R e o QUARTO vamos precisar instalar as extensões do VScode, para isso clique no ícone de extensões no menu lateral esquerdo e digite `R` no campo de busca e instale a extensão `R`. Repita o processo para instalar a extensão `Quarto`.\n\n![](install_extensions.png)\n\n# passo 5 - instalar pacotes (apenas se você não tiver instalado os pacotes sugeridos)\n\nPrimeiro vamos instalar algumas dependências do do Quarto para o R. O primeiro é o pacote rmarkdown, para isso digite `R` no terminal e pressione enter, isso vai abrir o console do R. Agora digite `install.packages(\"rmarkdown\")` e pressione enter. Você precisará criar uma pasta lib para os pacotes do R, você pode fazer isso antes ou somente aceitar a criação automática da pasta no processo de instalação do primeiro pacote. Este processo pode demorar alguns minutos dependendo do poder de processamento do seu codespace.\n\n:::{.callout-caution collapse=\"true\" title=\"Atenção\"}\nSe você já tiver instalado os pacotes em 'sudo add-apt-repository ppa:c2d4u.team/c2d4u4.0+' você pode pular este passo.\n:::\n\n# passo 6 - criar um projeto quarto\n\nPara testar a instalação do R e do QUARTO vamos criar um projeto quarto no diretório `workspaces/codespaces-blank` usando o comando `quarto create`.\n    \n```bash\n# cria um projeto quarto no diretório workspaces/codespaces-blank\n@user ➜ /workspaces/codespaces-blank $ quarto create\n#output\n ? Create › project\n ? Type › website\n ? Directory › /workspaces/codespaces-blank\nCreating project at /workspaces/codespaces-blank/workspaces/codespaces-blank:\n  - Created _quarto.yml\n  - Created index.qmd\n  - Created about.qmd\n  - Created styles.css\n\n```\nCaso queira fazer usando a interface clique em file, escolha  a opção quarto project  e siga as instruções da tela.\n\nCaso você tenha feito o processo pelo terminal, uma nova janela se abrirá com a pasta do projeto, a partir daqui você pode inicializar o repositório git e fazer o commit inicial caso queira, ainda não vou abordar essa parte, vai ficar para um próximo post.\n\nAo abrir o arquivo index.qmd você verá que ele é um arquivo markdown com algumas extensões, como por exemplo a possibilidade de usar blocos de código com a linguagem R. Vamos testar isso, digite o código abaixo no arquivo index.qmd:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cars)\n```\n:::\n\n\nAgora vamos renderizar o arquivo, para isso clique no ícone do quarto no menu lateral esquerdo e escolha a opção `Render Document`. Você verá que o arquivo index.html foi criado na pasta `site` do projeto. Outra forma de renderizar é usando o comando `quarto render` no terminal.\n\n```bash\nquarto render\n``` \n![resultados](results.png)\n\n## Considerações finais\n\nNeste post eu mostrei como criar um codespace no github e como instalar o R e o QUARTO. Também mostrei como criar um projeto quarto e renderizar o arquivo index.qmd. O processo parece trabalhoso, mas só precisa ser feito uma vez pois o codespaces nada mas é do que um container com o ambiente de desenvolvimento que você precisa para trabalhar, assim é possível manter um ambiente único para toda uma turma, por exemplo. \n\nO processo consiste em disponibilizar o repositório com o ambiente de desenvolvimento e os alunos criarem branches para desenvolverem seus projetos, tudo isso integrado ao github classroom, mas isso vai ficar pra outro post.\n\nSe você leu até aqui muito obrigado, espero que tenha gostado e que tenha sido útil. Se você tiver alguma dúvida ou sugestão, por favor, deixe um comentário abaixo ou entre em contato comigo pelo twitter [@nextmarte](https://twitter.com/nextmarte). Cadastre seu e-mail para receber o próximo post e outras novidades.\n\n:::\n\n<!-- ```{=html}\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"nextmarte/dragao_caolho\"\n        data-repo-id=\"R_kgDOKCPdqg\"\n        data-category=\"General\"\n        data-category-id=\"DIC_kwDOKCPdqs4CYSA1\"\n        data-mapping=\"pathname\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"1\"\n        data-input-position=\"top\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"pt\"\n        data-loading=\"lazy\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n``` -->\n\n<div id=\"disqus_thread\"></div>\n<script>\n    /**\n    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */\n    /*\n    var disqus_config = function () {\n    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable\n    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n    };\n    */\n    (function() { // DON'T EDIT BELOW THIS LINE\n    var d = document, s = d.createElement('script');\n    s.src = 'https://caverna-do-dragao-caolho.disqus.com/embed.js';\n    s.setAttribute('data-timestamp', +new Date());\n    (d.head || d.body).appendChild(s);\n    })();\n</script>\n<noscript>Please enable JavaScript to view the <a href=\"https://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}